<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProjectGuid>{5590729F-3176-4A91-94E3-54F75DA2EB9D}</ProjectGuid>
    <ProjectTypeGuids>{A3F8F2AB-B479-4A4A-A458-A89E7DC349F1};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <OutputType>Exe</OutputType>
    <RootNamespace>PabloDraw</RootNamespace>
    <AssemblyName>PabloDraw</AssemblyName>
    <MonoMacResourcePrefix>Resources</MonoMacResourcePrefix>
    <TargetFrameworkVersion>v2.0</TargetFrameworkVersion>
    <TargetFrameworkIdentifier>Xamarin.Mac</TargetFrameworkIdentifier>
    <GenerateAssemblyVersion>True</GenerateAssemblyVersion>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>..\..\Artifacts\bin\Debug\xammac</OutputPath>
    <DefineConstants>DEBUG;</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <EnableCodeSigning>false</EnableCodeSigning>
    <CodeSigningKey>Developer ID Application</CodeSigningKey>
    <CreatePackage>false</CreatePackage>
    <EnablePackageSigning>false</EnablePackageSigning>
    <IncludeMonoRuntime>false</IncludeMonoRuntime>
    <UseSGen>true</UseSGen>
    <UseRefCounting>true</UseRefCounting>
    <HttpClientHandler>HttpClientHandler</HttpClientHandler>
    <LinkMode>None</LinkMode>
    <XamMacArch>x86_64</XamMacArch>
    <PackageSigningKey>Developer ID Installer</PackageSigningKey>
    <I18n>other,rare,west</I18n>
    <EnableSGenConc>true</EnableSGenConc>
    <AOTMode>None</AOTMode>
    <UseHardenedRuntime>true</UseHardenedRuntime>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>..\..\Artifacts\bin\Release\xammac</OutputPath>
    <DefineConstants>
    </DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <EnableCodeSigning>true</EnableCodeSigning>
    <CreatePackage>true</CreatePackage>
    <EnablePackageSigning>true</EnablePackageSigning>
    <IncludeMonoRuntime>true</IncludeMonoRuntime>
    <UseSGen>true</UseSGen>
    <UseRefCounting>true</UseRefCounting>
    <LinkMode>SdkOnly</LinkMode>
    <HttpClientHandler>HttpClientHandler</HttpClientHandler>
    <XamMacArch>x86_64</XamMacArch>
    <CodeSigningKey>Developer ID Application</CodeSigningKey>
    <PackageSigningKey>Developer ID Installer</PackageSigningKey>
    <I18n>other,rare,west</I18n>
    <EnableSGenConc>true</EnableSGenConc>
    <AOTMode>None</AOTMode>
    <UseHardenedRuntime>true</UseHardenedRuntime>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Core" />
    <Reference Include="Xamarin.Mac" />
    <Reference Include="mscorlib" />
    <Reference Include="System.Runtime.Serialization" />
  </ItemGroup>
  <ItemGroup>
    <ImageAsset Include="Assets.xcassets\Contents.json" />
  </ItemGroup>
  <ItemGroup>
    <None Include="Info.plist" />
    <None Include="Entitlements.plist" />
  </ItemGroup>
  <ItemGroup>
    <Compile Include="AppDelegate.cs" />
    <Compile Include="Startup.cs" />
    <Compile Include="AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\Pablo\Pablo.csproj">
      <Project>{35DBE6BB-B46D-4AE9-8156-FBFC6EC2BB69}</Project>
      <Name>Pablo</Name>
    </ProjectReference>
    <ProjectReference Include="..\Pablo.Interface\Pablo.Interface.csproj">
      <Project>{3FAACC7E-D156-4599-B0D1-6177AD78E8B1}</Project>
      <Name>Pablo.Interface</Name>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <Content Include="PabloDraw.icns" />
    <Content Include="PabloDraw-Document.icns" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Eto.Platform.XamMac2">
      <Version>2.5.0-rc.4</Version>
    </PackageReference>
    <PackageReference Include="SharpCompress">
      <Version>0.24.0</Version>
    </PackageReference>
  </ItemGroup>
  <Import Project="$(MSBuildExtensionsPath)\Xamarin\Mac\Xamarin.Mac.CSharp.targets" />

  <ItemGroup Condition="$(GenerateAssemblyVersion) == 'True'">
    <Compile Include="$(IntermediateOutputPath)VersionInfo.cs">
      <Link>Properties\VersionInfo.cs</Link>
      <Visible>false</Visible>
    </Compile>
  </ItemGroup>
  
  <UsingTask TaskName="UpdatePList" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <PListFile ParameterType="System.String" Required="true" />
      <BundleVersion ParameterType="System.String" Required="true" />
      <BundleShortVersionString ParameterType="System.String" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Xml" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Xml" />
      <Code Type="Code" Language="cs"><![CDATA[
    using System;
    using System.IO;
    using System.Xml;
    using System.Text;
    using Microsoft.Build.Framework;
    using Microsoft.Build.Utilities;

    public class UpdatePList : Task
    {
      [Required]
      public string PListFile { get; set; }
      [Required]
      public string BundleVersion { get; set; }
      [Required]
      public string BundleShortVersionString { get; set; }

      XmlDocument xml;
      XmlNode dict;

      class NullSubsetXmlTextWriter : XmlTextWriter
      {
        XmlWriterSettings _settings;
        public NullSubsetXmlTextWriter(string inputFileName, Encoding encoding)
          : base(inputFileName, encoding)
        {
          Formatting = Formatting.Indented;
          IndentChar = ' ';
          Indentation = 2;
          _settings = new XmlWriterSettings();
          _settings.Encoding = Encoding.UTF8;
          _settings.Indent = true;
          _settings.IndentChars = "  ";
          _settings.NewLineChars = "\n";
          _settings.NewLineHandling = NewLineHandling.Entitize;
        }

        public override XmlWriterSettings Settings { get { return _settings; } }

        public override void WriteDocType(string name, string pubid, string sysid, string subset)
        {
          // fix issue writing doctype
          if (subset == string.Empty)
            subset = null;
          base.WriteDocType(name, pubid, sysid, subset);
        }
      }

      string GetStringProperty(string name)
      {
        var location = dict.SelectSingleNode("key[.='" + name + "']/following-sibling::string[1]");
        return location.InnerText;
      }

      void AddStringProperty(string name, string value, bool force = false)
      {
        XmlNode node;
      
        node = dict.SelectSingleNode("key[text()='" + name + "']");
        var exists = node != null;
        if (exists && !force)
          return;
        if (exists) {
          // update existing value
          node = dict.SelectSingleNode("key[text()='" + name + "']/following-sibling::string");
          if (node == null) {
            Log.LogError("Could not find the value node for '" + name + "'.");
            return;
          }
          node.InnerText = value;
        }
        else {
          dict.AppendChild(node = xml.CreateNode(XmlNodeType.Element, "key", null));
          node.InnerText = name;
          dict.AppendChild(node = xml.CreateNode(XmlNodeType.Element, "string", null));
          node.InnerText = value;
        }
      }
      
      public override bool Execute()
      {
        xml = new XmlDocument();
        xml.Load(PListFile);

        dict = xml.SelectSingleNode("plist/dict") as XmlElement;

        AddStringProperty("CFBundleVersion", BundleVersion, true);
        AddStringProperty("CFBundleShortVersionString", BundleShortVersionString ?? BundleVersion, true);

        using (var sw = new NullSubsetXmlTextWriter(PListFile, Encoding.UTF8))
          xml.Save(sw);
          return true;
      }
    }
]]></Code>
    </Task>
  </UsingTask>

  <Target Name="_UpdatePList" BeforeTargets="CoreCompile">
    <UpdatePList PListFile="Info.plist" BundleVersion="$(AssemblyFileVersion)" />
  </Target>

</Project>